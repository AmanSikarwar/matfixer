# graph/state.py
from typing import TypedDict, Optional

class AppState(TypedDict):
    """
    Represents the state of the application graph, accumulating results from different agents.

    Attributes:
        query: The initial user query submitted to the workflow.
        rag_root_cause_analysis: The analysis of the root cause identified by the RAG agent
                                 searching internal knowledge bases. Defaults to None if not found
                                 or an error occurs.
        rag_solution: The potential solution or findings retrieved by the RAG agent from
                      internal knowledge bases. Defaults to None if not found or an error occurs.
        web_search_result: The summary or answer obtained from the web search agent (e.g., using Tavily).
                           Defaults to None if the search fails or returns no relevant results.
        final_report: The synthesized, comprehensive report generated by the final synthesizer agent,
                      combining information from the query, RAG results, and web search. Defaults to None.
        error: Stores any error message encountered during the execution of any node in the graph.
               Used for tracking issues and potentially for conditional routing (though not used for routing here).
               Defaults to None.
    """
    query: str
    rag_root_cause_analysis: Optional[str]
    rag_solution: Optional[str]
    web_search_result: Optional[str]
    final_report: Optional[str]
    error: Optional[str]